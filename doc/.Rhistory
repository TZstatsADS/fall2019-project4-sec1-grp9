getwd()
sys.getenv()
Sys.getenv()
Sys.getenv('PATH')
install.packages('dplyr')
install.packages('xts')
?install.packages
.libPaths()
file.path('~')
?filepath
?file.path
.libPaths()
Sys.getenv('R_ENVIRON')
Sys.getenv('R_E')
Sys.getenv('R_HOME')
Sys.getenv('R_ENVIRON_USER')
?Sys.getenv
Sys.getenv()
?.libPaths
.libPaths
.libPaths()
?Sys.getenv
.libPaths()
.libPaths()
?.libPaths()
.Library
.Library.site
.libPaths()
Sys.getenv()
Sys.getenv()
.libPaths()
.libPaths()
Sys.getenv()
.libPaths()
.libPaths()
Sys.getenv()
.libPaths()
getwd()
Sys.getenv()
.libPaths()
.libPaths(.libPaths()[2])
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
install.packages('dplyr')
R.home()
install.packages('dplyr')
install.packages('xts')
library(tidytext)
library(tidyverse)
install.packages('tidytext')
library(tidyverse)
install.packages('tidytext')
library(tidyverse)
library(tidytext)
install.packages('tidyverse')
install.packages('plotly')
library(DT)
install.packages('DT')
install.packages('tm')
install.packages('data.table')
install.packages('scales')
install.packages('wordcloud2')
install.packages('gridExtra')
install.packages('ngram')
install.packages('shiny')
unlink('Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc/Text_Processing_cache', recursive = TRUE)
install.packages(c("caret", "R.matlab"))
library(EBImage)
source("https://bioconductor.org/biocLite.R")
https://bioconductor.org/install
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
install.packages('digest')
install.packages("digest")
install.packages("digest")
install.packages("digest")
setwd('C:/Users/wwyws/OneDrive/Documents/Columbia/STAT5243 Applied Data Science/fall2019-project4-sec1-grp9/doc')
### Step 1 Load Data and Train-test Split
library(dplyr)
library(tidyr)
library(ggplot2)
library(foreach)
library(doParallel)
library(zoo)
library(Matrix)
library(lubridate)
source("../lib/Matrix_Factorization.R")
source("../lib/cross_validation.R")
data <- read.csv("../data/ml-latest-small/ratings.csv")
load('../output/CVResult.RData')
resultList[[1]]
a <- resultList$`f = 10 , lambda = 0.01`$RMSE
View(a)
resultList <- lapply(resultList,FUN = function(x)x$RMSE)
names(resultList)
resultList
save(resultList, file = "../output/CVResult.RData")
setwd('C:/Users/wwyws/OneDrive/Documents/Columbia/STAT5243 Applied Data Science/fall2019-project4-sec1-grp9/doc')
### Step 1 Load Data and Train-test Split
library(dplyr)
library(tidyr)
library(ggplot2)
library(foreach)
library(doParallel)
library(zoo)
library(Matrix)
library(lubridate)
source("../lib/Matrix_Factorization.R")
source("../lib/cross_validation.R")
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(123)
dataSplit <- train_test_split(data,0.8) #this function ensures that all users and movies are in the training set.
data_train <- dataSplit$train
data_test <- dataSplit$test
load('../output/CVResult.RData')
x <- resultList[[1]]
View(x)
names(x)
names(resultList[1])
i=1
thisResult <- resultList[[i]]
cbind('Train',names(resultList)[i],thisResult$Iteration,thisResult$Train.Q.Update)
data.frame('Train',names(resultList)[i],thisResult$Iteration,thisResult$Train.Q.Update)
?setNames
list(names(resultList))
as.list(names(resultList))
resultNms <- as.list(names(resultList))
rmse <- lapply(resultNms, FUN = function(nm){
x <- resultList[[nm]]
rbind(data.frame('Train',nm,(resultList)[i],x$Iteration,xrmse$Train.Q.Update),
data.frame('Test',nm,x$Iteration,x$Test.Q.Update)
)
})
rmse <- lapply(resultNms, FUN = function(nm){
x <- resultList[[nm]]
rbind(data.frame('Train',nm,(resultList)[i],x$Iteration,x$Train.Q.Update),
data.frame('Test',nm,x$Iteration,x$Test.Q.Update)
)
})
rmse <- lapply(resultNms, FUN = function(nm){
x <- resultList[[nm]]
rbind(data.frame('Train',nm,x$Iteration,x$Train.Q.Update),
data.frame('Test',nm,x$Iteration,x$Test.Q.Update)
)
})
x
rbind(data.frame('Train',nm,x$Iteration,x$Train.Q.Update),
data.frame('Test',nm,x$Iteration,x$Test.Q.Update)
)
nm <- resultNms[1]
nm
rbind(data.frame('Train',nm,x$Iteration,x$Train.Q.Update),
data.frame('Test',nm,x$Iteration,x$Test.Q.Update)
)
a <- data.frame('Train',nm,x$Iteration,x$Train.Q.Update)
b <- data.frame('Test',nm,x$Iteration,x$Test.Q.Update)
rbind(a,b)
View(a)
View(b)
rbind(data.frame(train_test = 'Train',par = nm,Iteration = x$Iteration,RMSE = x$Train.Q.Update,check.names = F),
data.frame(train_test = 'Test',par = nm,Iteration = x$Iteration,RMSE = x$Test.Q.Update,check.names = F)
)
setwd('C:/Users/wwyws/OneDrive/Documents/Columbia/STAT5243 Applied Data Science/fall2019-project4-sec1-grp9/doc')
### Step 1 Load Data and Train-test Split
library(dplyr)
library(tidyr)
library(ggplot2)
library(foreach)
library(doParallel)
library(zoo)
library(Matrix)
library(lubridate)
source("../lib/Matrix_Factorization.R")
source("../lib/cross_validation.R")
data <- read.csv("../data/ml-latest-small/ratings.csv")
set.seed(123)
dataSplit <- train_test_split(data,0.8) #this function ensures that all users and movies are in the training set.
data_train <- dataSplit$train
data_test <- dataSplit$test
load('../output/CVResult.RData')
resultNms <- as.list(names(resultList))
resultNms
rmse <- lapply(resultNms, FUN = function(nm){
x <- resultList[[nm]]$RMSE
rbind(data.frame(train_test = 'Train',par = nm,Iteration = x$Iteration,RMSE = x$Train.Q.Update,check.names = F),
data.frame(train_test = 'Test',par = nm,Iteration = x$Iteration,RMSE = x$Test.Q.Update,check.names = F)
)
})
rmse <- do.call(rbind,lapply(resultNms, FUN = function(nm){
x <- resultList[[nm]]$RMSE
rbind(data.frame(train_test = 'Train',par = nm,Iteration = x$Iteration,RMSE = x$Train.Q.Update,check.names = F),
data.frame(train_test = 'Test',par = nm,Iteration = x$Iteration,RMSE = x$Test.Q.Update,check.names = F)
)
}))
View(rmse)
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() + facet_grid(~par)
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_discrete(limits = c('10','0','5'))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_discrete(breaks = c(0,5,10))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_discrete(breaks = c(0,5,10),labels = c(0,5,10))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_discrete(breaks = c(0,5,10),labels = c(''0','5',10'))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_discrete(breaks = c(0,5,10),labels = c('0','5','10'))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_discrete(breaks = c('0','5','10'),labels = c('0','5','10'))
continuous(breaks = c('0','5','10'),labels = c('0','5','10'))
scale_x_continuous
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_continuous(breaks = c('0','5','10'),labels = c('0','5','10')
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_continuous(breaks = c('0','5','10'),labels = c('0','5','10'))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par) + scale_x_continuous(breaks = c(0,5,10),labels = c('0','5','10'))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par,labeller = label_wrap_gen(multi_line = TRUE)) + scale_x_continuous(breaks = c(0,5,10),labels = c('0','5','10'))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par,labeller = label_wrap_gen(width = 2,multi_line = TRUE)) + scale_x_continuous(breaks = c(0,5,10),labels = c('0','5','10'))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par,labeller = label_wrap_gen(width = 16,multi_line = TRUE)) + scale_x_continuous(breaks = c(0,5,10),labels = c('0','5','10'))
rmse %>% ggplot(aes(x = Iteration, y = RMSE, col = train_test)) + geom_point() +
facet_grid(~par,labeller = label_wrap_gen(width = 16,multi_line = TRUE)) + scale_x_continuous(breaks = c(0,5,10),labels = c('0','5','10'))
View(rmse)
